# -*- coding: utf-8 -*-
"""Project Sprint 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N8xq4cAj6cIVbGtIfIxxGp1LJnQz5iM4

**Introduction**

Effective business decision-making hinges on the accurate formulation and testing of hypotheses. In this project, we aim to analyze the music preferences of listeners in two cities, Springfield and Shelbyville, using real data from Y.Music. Our goal is to test several hypotheses regarding user behavior and music preferences in these cities to draw actionable insights.

**Objectives**

The primary objectives of this project are:

To determine if user activity varies by day and city.
To compare the genres listened to by residents of Springfield and Shelbyville on Monday mornings and Friday nights.
To identify any significant differences in music preferences between the two cities, specifically if Springfield residents prefer pop music and Shelbyville residents favor rap music.
Data Description

The data includes the following columns:

- userID: Unique identifier for each user
- Track: Title of the track
- artist: Name of the artist
- genre: Genre of the music
- City: City where the user is located
- time: Timestamp when the track was played
- Day: Day of the week when the track was played

Hypotheses

User activity varies depending on the day and city.
On Monday mornings, residents of Springfield and Shelbyville listen to different genres. The same applies to Friday nights.
Listeners in Springfield and Shelbyville have different preferences. Specifically, Springfield users are inclined towards pop music, while Shelbyville users prefer rap music.
Methodology

To achieve the project objectives, we will perform the following steps:

1. Data Cleaning and Preparation: Ensure the dataset is clean, with no missing or inconsistent entries.
2. Descriptive Analysis: Provide an overview of the dataset, including user distribution across cities, popular genres, and overall listening habits.
3. Hypothesis Testing: Use statistical methods to test the hypotheses. This includes:
  - Analyzing user activity patterns across different days and cities.
  - Comparing genre preferences on Monday mornings and Friday nights between the two cities.
 - Evaluating overall genre preferences in Springfield and Shelbyville.
4. Conclusion and Recommendations: Summarize the findings and provide recommendations based on the analysis.

Expected Outcomes

Upon completion of this project, we expect to have a clear understanding of:

1. How user activity varies by day and city.
2. Whether there are distinct genre preferences on specific days and times between Springfield and Shelbyville.
3. The overall music preferences in each city and how they differ.
4. This analysis will help in making data-driven decisions for targeted marketing, content creation, and improving user engagement based on city-specific music preferences.

Data **Loadment**
"""

import pandas as pd

df = pd.read_csv('/content/music_project_en.csv')

df.head(10)

df.describe()
df.info()

df.columns

df = df.rename(columns={
    '  userID':'user_id',
    'Track':'track',
    '  City  ':'city',
    'Day':'day'
})

df.columns

df.isna().sum().sort_values(ascending=False)

column_to_replace = ['track','artist','genre']
for value in column_to_replace :
    df[value] = df[value].fillna('unknown')

df.isna().sum()

df.duplicated().sum()

df = df.drop_duplicates().reset_index(drop=True)

df.duplicated().sum()

df['genre'].sort_values(ascending=True).unique()

def replace_wrong_genres(series,wrong_genres,correct_genres):
    series = series.replace(wrong_genres,correct_genres)
    return series

wrong_genres = ['hip', 'hop', 'hip-hop']
correct_genre = 'hiphop'

df['genre'] = replace_wrong_genres(df['genre'], wrong_genres, correct_genre)

df['genre'].sort_values(ascending=True).unique()

"""We have detected three issues in our data:

1. Incorrect title formatting
2. Missing values
3. Explicit and implicit duplicates

The column names have been cleaned to facilitate table processing. All missing values have been replaced with 'unknown'. However, we still need to see if the missing values in the 'genre' column will affect our calculations.

The absence of duplicates will make our results more accurate and easier to understand.

**Testing Hypothesis**

**Hyphothesis 1**
"""

df.groupby('city')['track'].count().reset_index()

df.groupby('day')['track'].count().reset_index()

"""
Create a function number_tracks() to count the number of tracks played for a given day and city."""

def number_tracks (day, city) :
    track_list = df.loc[(df['day']==day) & (df['city']==city)]['user_id'].count()
    return track_list

spr_mon = number_tracks('Monday','Springfield')
shel_mon = number_tracks('Monday','Shelbyville')
spr_wed = number_tracks('Wednesday','Springfield')
shel_wed = number_tracks('Wednesday','Shelbyville')
spr_fri = number_tracks('Friday','Springfield')
shel_fri = number_tracks('Friday','Shelbyville')

col=['city', 'monday', 'wednesday', 'friday']
res=[
    ['Springfield', spr_mon, spr_wed, spr_fri],
    ['Shelbyville', shel_mon, shel_wed, shel_fri]
]

res_table=pd.DataFrame(data=res, columns=col)
res_table

"""**Conclusion**

1. In Springfield, the number of tracks played peaks on Monday and Friday, while there is a decline in activity on Wednesday.
2. In Shelbyville, conversely, users listen to music more on Wednesday, with less user activity on Monday and Friday.

**Hyphotesis 2**
"""

spr_general = df[(df['city'] == 'Springfield')]
spr_general

shel_general = df[(df['city'] == 'Shelbyville')]
shel_general

"""
Function genre_weekday() has been created with four parameters:

1. A data table
2. The name of the day
3. A start timestamp in the format 'hh'
4. An end timestamp in the format 'hh'

The function should return information about the 15 most popular genres on a specific day within the period between the two timestamps."""

def genre_weekday(df, day, time1, time2):

    # Sequential filtering
    # genre_df will only retain rows from df where the 'day' is equal to the given day
    genre_df = df[df['day'] == day]

    # genre_df will only retain rows from df where the 'time' is less than time2
    genre_df = genre_df[genre_df['time'] < time2]

    # genre_df will only retain rows from df where the 'time' is greater than time1
    genre_df = genre_df[genre_df['time'] > time1]

    # Group the filtered DataFrame by the 'genre' column, take the 'user_id' column, and count the number of rows for each genre using the count() method
    genre_df_count = genre_df.groupby('genre')['user_id'].count()

    # Sort the results in descending order (so the most popular genre is displayed first in the Series object)
    genre_df_sorted = genre_df_count.sort_values(ascending=False)

    # Return a Series object containing the 15 most popular genres on a given day during a specified time period
    return genre_df_sorted[:15]

genre_weekday(spr_general,'Monday','07:00:00','11:00:00')

genre_weekday(shel_general,'Monday','07:00:00','11:00:00')

genre_weekday(spr_general,'Friday','17:00:00','23:00:00')

genre_weekday(shel_general,'Friday','17:00:00','23:00:00')

"""**Conclusion**

After comparing the top 15 genres on Monday morning, we can draw the following conclusions:

1. Users from Springfield and Shelbyville listen to the same genres. The top five genres are the same in both cities, with only rock and electronic switching places.
2. In Springfield, the number of missing values is very high, so 'unknown' appears in the 10th position. This indicates that missing values constitute a significant portion of the data, which could affect the reliability of our conclusions.

For Friday night, the situation is similar. Individual genres vary, but overall, the top 15 genres are the same for both cities.

Therefore, the second hypothesis is partially confirmed:

1. Users listen to the same music at the beginning and end of the week.
2. There is no significant difference between Springfield and Shelbyville. In both cities, pop is the most popular genre.

However, the significance of the number of missing values calls these results into question. In Springfield, the large amount of missing data impacts our top 15 genres. Without these missing values, the results might be different.

**Hyphotesis 3**
"""

spr_genres = spr_general.groupby(['genre'])['track'].count().sort_values(ascending=False)

spr_genres.head(10)

shel_genres = shel_general.groupby(['genre'])['track'].count().sort_values(ascending=False)

shel_genres.head(10)

"""**Conclusion**

Pop music is the most popular genre in Springfield, as we anticipated. However, pop music is equally popular in both Springfield and Shelbyville, and rap music does not make it into the top 5 genres for either city.

**Findings**

We tested the following three hypotheses:

1. User activity varies depending on the day and city.
2. On Monday morning, residents of Springfield and Shelbyville listen to different genres. This also applies to Friday night.
3. Listeners in Springfield and Shelbyville have different preferences. In both cities, users prefer pop music.

After analyzing the available data, we can conclude that:

1. User activity in Springfield and Shelbyville varies depending on the day of the week, although the two cities vary in various ways. The first hypothesis can be fully accepted.

2. Music preferences do not vary significantly throughout the week in Springfield and Shelbyville. We can see minor differences in ranking on Monday, but users in both Springfield and Shelbyville mostly listen to pop music.
Therefore, this hypothesis cannot be accepted. It is also important to note that the results obtained could differ if we did not have missing values.

3. It turns out that the music preferences of users from Springfield and Shelbyville are very similar.
The third hypothesis is rejected. If there were differences in preferences, unfortunately, we cannot know them from this data.
"""

